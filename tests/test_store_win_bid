import unittest
from datetime import datetime, timedelta
from main.models import db, Item, User, Bid, Notification
from main import create_app

class TestAuctionWinner(unittest.TestCase):
    def setUp(self):
        """Set up test environment before each test"""
        self.app = create_app('testing')
        self.app_context = self.app.app_context()
        self.app_context.push()
        db.create_all()

        # Create test user (seller)
        self.seller = User(
            username='seller',
            email='seller@test.com',
            role=1
        )
        self.seller.set_password('password123')

        # Create test bidders
        self.bidder1 = User(
            username='bidder1',
            email='bidder1@test.com',
            role=1
        )
        self.bidder1.set_password('password123')

        self.bidder2 = User(
            username='bidder2',
            email='bidder2@test.com',
            role=1
        )
        self.bidder2.set_password('password123')

        db.session.add_all([self.seller, self.bidder1, self.bidder2])
        db.session.commit()

    def tearDown(self):
        """Clean up after each test"""
        db.session.remove()
        db.drop_all()
        self.app_context.pop()

    def test_winning_bid_storage(self):
        """Test that the highest bid above minimum price wins"""
        # Create test item
        item = Item(
            seller_id=self.seller.id,
            title='Test Item',
            description='Test Description',
            minimum_price=100.00,
            auction_start=datetime.now() - timedelta(days=1),
            auction_end=datetime.now() - timedelta(minutes=1)
        )
        db.session.add(item)
        db.session.commit()

        # Create test bids
        bid1 = Bid(
            item_id=item.item_id,
            bidder_id=self.bidder1.id,
            bid_amount=150.00
        )
        bid2 = Bid(
            item_id=item.item_id,
            bidder_id=self.bidder2.id,
            bid_amount=200.00
        )
        db.session.add_all([bid1, bid2])
        db.session.commit()

        # Finalize auction
        item.finalise_auction()

        # Assert the highest bid won
        self.assertEqual(item.winning_bid_id, bid2.bid_id)
        self.assertEqual(item.winning_bid.bidder_id, self.bidder2.id)

    def test_no_bids_below_minimum(self):
        """Test that bids below minimum price don't win"""
        item = Item(
            seller_id=self.seller.id,
            title='Test Item',
            description='Test Description',
            minimum_price=100.00,
            auction_start=datetime.now() - timedelta(days=1),
            auction_end=datetime.now() - timedelta(minutes=1)
        )
        db.session.add(item)
        db.session.commit()

        # Create bid below minimum price
        bid = Bid(
            item_id=item.item_id,
            bidder_id=self.bidder1.id,
            bid_amount=50.00
        )
        db.session.add(bid)
        db.session.commit()

        # Finalize auction
        item.finalise_auction()

        # Assert no winner was set
        self.assertIsNone(item.winning_bid_id)

    def test_notification_creation(self):
        """Test that notifications are created for winner and seller"""
        item = Item(
            seller_id=self.seller.id,
            title='Test Item',
            description='Test Description',
            minimum_price=100.00,
            auction_start=datetime.now() - timedelta(days=1),
            auction_end=datetime.now() - timedelta(minutes=1)
        )
        db.session.add(item)
        db.session.commit()

        # Create winning bid
        bid = Bid(
            item_id=item.item_id,
            bidder_id=self.bidder1.id,
            bid_amount=150.00
        )
        db.session.add(bid)
        db.session.commit()

        # Finalize auction
        item.finalise_auction()

        # Check winner notification
        winner_notification = Notification.query.filter_by(
            user_id=self.bidder1.id
        ).first()
        self.assertIsNotNone(winner_notification)
        self.assertIn('Congratulations', winner_notification.message)

        # Check seller notification
        seller_notification = Notification.query.filter_by(
            user_id=self.seller.id
        ).first()
        self.assertIsNotNone(seller_notification)
        self.assertIn('has been sold', seller_notification.message)


if __name__ == '__main__':
    unittest.main()
